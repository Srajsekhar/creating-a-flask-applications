Creating a basic Flask application that connects to MySQL is a great starting point for learning web application development with Python! Let’s walk through the Python code step-by-step so you can understand how it all fits together. We’ll start by setting up a simple API that connects to MySQL and performs basic operations like adding and retrieving data.

Step 1: Setting Up Flask and MySQL
First, install the necessary packages:

Flask for building the web application.
mysql-connector-python to interact with MySQL from Python.
You can install them using:

bash
Copy code
pip install Flask mysql-connector-python
Step 2: Writing the Python Code for a Simple Flask Application
Here’s a basic example of a Flask app that connects to MySQL, with explanations for each part.

python
Copy code
from flask import Flask, request, jsonify
import mysql.connector
from mysql.connector import Error

app = Flask(__name__)

# Configure MySQL connection
def create_connection():
    connection = None
    try:
        connection = mysql.connector.connect(
            host="localhost",        # Change to your MySQL container name or IP if in Docker
            user="yourusername",     # MySQL username
            password="yourpassword", # MySQL password
            database="testdb"        # Database you want to connect to
        )
        print("Connection to MySQL DB successful")
    except Error as e:
        print(f"The error '{e}' occurred")
    return connection

# Initialize a connection
connection = create_connection()

# Route to create a new user
@app.route("/add_user", methods=["POST"])
def add_user():
    if request.method == "POST":
        data = request.get_json()
        name = data["name"]
        email = data["email"]

        query = "INSERT INTO users (name, email) VALUES (%s, %s)"
        values = (name, email)

        cursor = connection.cursor()
        cursor.execute(query, values)
        connection.commit()
        
        return jsonify({"message": "User added successfully"}), 201

# Route to fetch all users
@app.route("/users", methods=["GET"])
def get_users():
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    
    return jsonify(users), 200

# Start the Flask server
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
Explanation of the Code
Imports:

Flask: Creates the web server and defines routes.
mysql.connector: Connects to the MySQL database.
jsonify and request: Used to send JSON responses and read JSON request data.
Creating a MySQL Connection (create_connection function):

This function creates and returns a connection to the MySQL database. You specify the database host, user, password, and database name here.
If there’s a connection error, it prints the error for debugging purposes.
Adding a User Endpoint (add_user route):

Route: /add_user with POST method. It listens for requests to this endpoint and expects JSON data.
Data Handling: Reads JSON data from the client with request.get_json().
Query Execution: Uses cursor.execute() to run an SQL INSERT query, adding a new user to the database.
Response: Returns a success message with status code 201.
Fetching All Users Endpoint (get_users route):

Route: /users with GET method. This endpoint retrieves all users from the database.
Query Execution: Runs a SELECT query to get all user records.
Response: Sends the list of users back as JSON with status code 200.
Running the Server:

The app.run() function starts the Flask application and listens on all network interfaces (0.0.0.0) on port 5000.
Step 3: Setting Up the MySQL Database
In MySQL, create a database and a table to store the users:

Create Database:

sql
Copy code
CREATE DATABASE testdb;
Create Users Table:

sql
Copy code
USE testdb;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);
Now you have a table users where each entry will store a name and an email.

Step 4: Testing the Flask App
Starting the Flask Server: Run your Flask app with:

bash
Copy code
python app.py
Adding a User: Use a tool like Postman or curl to send a POST request to add a user. For example:

bash
Copy code
curl -X POST http://localhost:5000/add_user -H "Content-Type: application/json" -d '{"name": "Alice", "email": "alice@example.com"}'
Retrieving Users: To fetch all users, send a GET request:

bash
Copy code
curl http://localhost:5000/users
How Data is Stored in MySQL
Each time you add a user with the /add_user endpoint, the INSERT query stores that user’s data in the users table within the MySQL database. You can retrieve and view this data at any time using the /users endpoint.

Putting It Together with Docker Compose
If you’re using Docker Compose, here’s a quick setup for the services:

docker-compose.yml:

yaml
Copy code
version: "3"
services:
  app:
    build: .
    ports:
      - "5000:5000"
    depends_on:
      - db

  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: yourpassword
      MYSQL_DATABASE: testdb
    ports:
      - "3306:3306"
In this setup:

db is the MySQL service.
app is the Flask app service that depends on db.